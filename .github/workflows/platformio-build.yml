name: PlatformIO Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Build Environment'
        required: true
        default: 'airm2m_core_esp32c3'
        type: choice
        options:
        - airm2m_core_esp32c3
        - esp32dev
        - esp32-s2-saola-1
        - esp32-s3-devkitc-1
        - esp32-c3-devkitm-1

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [airm2m_core_esp32c3]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio/.cache
          ~/.platformio/packages
          ~/.platformio/platforms
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Create secrets.h from template
      run: |
        if [ ! -f include/secrets.h ]; then
          cp include/secrets_example.h include/secrets.h
          echo "Created secrets.h from template"
        fi
    
    - name: Build firmware
      run: |
        # 使用指定的环境或默认环境
        ENV_NAME="${{ github.event.inputs.environment || matrix.environment }}"
        echo "Building for environment: $ENV_NAME"
        
        # 构建固件
        pio run -e $ENV_NAME
        
        # 显示构建信息
        echo "Build completed successfully!"
        ls -la .pio/build/$ENV_NAME/
    
    - name: Build filesystem
      run: |
        ENV_NAME="${{ github.event.inputs.environment || matrix.environment }}"
        echo "Building filesystem for environment: $ENV_NAME"
        
        # 构建文件系统
        pio run -e $ENV_NAME -t buildfs
        
        echo "Filesystem build completed!"
        ls -la .pio/build/$ENV_NAME/
    
    - name: Generate build info
      run: |
        ENV_NAME="${{ github.event.inputs.environment || matrix.environment }}"
        BUILD_DIR=".pio/build/$ENV_NAME"
        
        # 创建构建信息文件
        cat > $BUILD_DIR/build_info.md << EOF
        # LittleGallery-ESP32 Build Information
        
        ## Build Details
        - **Environment**: $ENV_NAME
        - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Workflow**: ${{ github.workflow }}
        - **Run Number**: ${{ github.run_number }}
        
        ## Files Generated
        - \`firmware.bin\` - Main application binary
        - \`littlefs.bin\` - LittleFS filesystem image
        - \`bootloader.bin\` - ESP32 bootloader
        - \`partitions.bin\` - Partition table
        
        ## Flash Commands
        
        ### Using esptool.py
        \`\`\`bash
        # Flash firmware only
        esptool.py --chip esp32c3 --port /dev/ttyUSB0 --baud 460800 write_flash 0x10000 firmware.bin
        
        # Flash filesystem only
        esptool.py --chip esp32c3 --port /dev/ttyUSB0 --baud 460800 write_flash 0x290000 littlefs.bin
        
        # Flash everything
        esptool.py --chip esp32c3 --port /dev/ttyUSB0 --baud 460800 write_flash \\
          0x0 bootloader.bin \\
          0x8000 partitions.bin \\
          0x10000 firmware.bin \\
          0x290000 littlefs.bin
        \`\`\`
        
        ### Using PlatformIO
        \`\`\`bash
        # Flash firmware
        pio run -e $ENV_NAME -t upload
        
        # Flash filesystem
        pio run -e $ENV_NAME -t uploadfs
        \`\`\`
        
        ## File Sizes
        EOF
        
        # 添加文件大小信息
        if [ -f "$BUILD_DIR/firmware.bin" ]; then
          echo "- Firmware: $(stat -c%s $BUILD_DIR/firmware.bin) bytes" >> $BUILD_DIR/build_info.md
        fi
        
        if [ -f "$BUILD_DIR/littlefs.bin" ]; then
          echo "- Filesystem: $(stat -c%s $BUILD_DIR/littlefs.bin) bytes" >> $BUILD_DIR/build_info.md
        fi
        
        if [ -f "$BUILD_DIR/bootloader.bin" ]; then
          echo "- Bootloader: $(stat -c%s $BUILD_DIR/bootloader.bin) bytes" >> $BUILD_DIR/build_info.md
        fi
        
        if [ -f "$BUILD_DIR/partitions.bin" ]; then
          echo "- Partitions: $(stat -c%s $BUILD_DIR/partitions.bin) bytes" >> $BUILD_DIR/build_info.md
        fi
        
        echo "" >> $BUILD_DIR/build_info.md
        echo "## Memory Usage" >> $BUILD_DIR/build_info.md
        
        # 提取内存使用信息
        if [ -f "$BUILD_DIR/firmware.elf" ]; then
          echo "\`\`\`" >> $BUILD_DIR/build_info.md
          pio run -e $ENV_NAME -v 2>&1 | grep -E "(RAM|Flash)" | tail -5 >> $BUILD_DIR/build_info.md || echo "Memory info not available" >> $BUILD_DIR/build_info.md
          echo "\`\`\`" >> $BUILD_DIR/build_info.md
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: littlegallery-esp32-${{ github.event.inputs.environment || matrix.environment }}-${{ github.run_number }}
        path: |
          .pio/build/${{ github.event.inputs.environment || matrix.environment }}/*.bin
          .pio/build/${{ github.event.inputs.environment || matrix.environment }}/*.elf
          .pio/build/${{ github.event.inputs.environment || matrix.environment }}/*.map
          .pio/build/${{ github.event.inputs.environment || matrix.environment }}/build_info.md
        retention-days: 30
        compression-level: 9
    
    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          .pio/build/${{ github.event.inputs.environment || matrix.environment }}/*.bin
          .pio/build/${{ github.event.inputs.environment || matrix.environment }}/build_info.md
        body_path: .pio/build/${{ github.event.inputs.environment || matrix.environment }}/build_info.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload to release assets (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      run: |
        ENV_NAME="${{ github.event.inputs.environment || matrix.environment }}"
        BUILD_DIR=".pio/build/$ENV_NAME"
        
        echo "Build artifacts ready for download:"
        echo "- Firmware: $BUILD_DIR/firmware.bin"
        echo "- Filesystem: $BUILD_DIR/littlefs.bin"
        echo "- Build info: $BUILD_DIR/build_info.md"
        
        # 显示文件列表
        ls -la $BUILD_DIR/
    
  check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Check PlatformIO configuration
      run: |
        echo "Checking PlatformIO configuration..."
        pio project config
        
        echo "Available environments:"
        pio project config --json-output | python3 -c "
        import json, sys
        config = json.load(sys.stdin)
        for env in config:
            if env.startswith('env:'):
                print(f'  - {env[4:]}')
        "
    
    - name: Validate project structure
      run: |
        echo "Validating project structure..."
        
        # 检查必要文件
        required_files=(
          "platformio.ini"
          "src/main.cpp"
          "include/secrets_example.h"
          "data/index.html"
          "data/app.js"
          "data/style.css"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done
        
        echo "Project structure validation passed!"
